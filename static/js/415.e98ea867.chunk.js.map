{"version":3,"file":"static/js/415.e98ea867.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.jsx","hooks/useFetchAllMovies.js","hooks/useFetchMovieDetails.js","hooks/useFetchMovieReviews.js","hooks/useFetchByQuery.js","hooks/useFetchMovieCast.js","pages/Home.jsx","services/movie-service.js"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\nimport { routes } from 'routes';\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <ul>\n      {movies.map(\n        ({ id, title }) =>\n          title && (\n            <li key={id}>\n              <Link to={`${routes.MOVIES}/${id}`} state={{ from: location }}>\n                <h4 style={{ color: 'black' }}>{title}</h4>\n              </Link>\n            </li>\n          )\n      )}\n    </ul>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { getAllMoviesList } from 'services/movie-service';\n\nexport const useFetchAllMovies = () => {\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    const fetchAllList = async () => {\n      try {\n        const { data } = await getAllMoviesList();\n        setMovies(data.results);\n      } catch (error) {\n        setError('Something went wrong');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchAllList();\n  }, []);\n\n  return { movies, error, loading };\n};\n","import { useParams } from 'react-router-dom';\n\nconst { useState, useEffect } = require('react');\nconst { getMovieFullInfo } = require('services/movie-service');\n\nexport const useFetchMovieDetails = () => {\n  const [movie, setMovie] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const { movieId } = useParams();\n  useEffect(() => {\n    if (!movieId) return;\n    setLoading(true);\n    const fetchMovie = async () => {\n      try {\n        const data = await getMovieFullInfo(movieId);\n        setMovie(data);\n      } catch (error) {\n        setError('Something went wrongðŸ™„');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMovie();\n  }, [movieId]);\n  return { movie, error, loading };\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from 'services/movie-service';\n\nexport const useFetchMovieReviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setLoading(true);\n    if (!movieId) return;\n    const fetchMovieReviews = async () => {\n      try {\n        const { data } = await getMovieReviews(movieId);\n        setReviews(data.results);\n      } catch (error) {\n        setError('Something went wrongðŸ™„');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMovieReviews();\n  }, [movieId]);\n\n  return { reviews, error, loading };\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getMovieByQuery } from 'services/movie-service';\n\nconst useFetchByQuery = () => {\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n\n  useEffect(() => {\n    setLoading(true);\n    if (!query) return;\n    const fetchResponse = async () => {\n      try {\n        const { data } = await getMovieByQuery(query);\n        setMovies(data.results);\n      } catch (error) {\n        setError('Something went wrongðŸ™„');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchResponse();\n  }, [query]);\n\n  const handleSubmit = value => {\n    setSearchParams({ query: value });\n  };\n  return { movies, error, loading, handleSubmit };\n};\n\nexport default useFetchByQuery;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCast } from 'services/movie-service';\n\nexport const useFetchMovieCast = () => {\n  const [credits, setCredits] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setLoading(true);\n    if (!movieId) return;\n    const fetchMovieCast = async () => {\n      try {\n        const data = await getMovieCast(movieId);\n        setCredits(data.cast);\n      } catch (error) {\n        setError('Something went wrongðŸ™„');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMovieCast();\n  }, [movieId]);\n\n  return { credits, error, loading };\n};\n","import { Loader } from 'components/Loader/Loader';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport { useFetchAllMovies } from 'hooks';\n\nconst Home = () => {\n  const { movies, error, loading } = useFetchAllMovies();\n\n  return (\n    <div>\n      {loading && <Loader />}\n      {error && <h3> Something went wrongðŸ™„... </h3>}\n      {movies.length !== 0 && <MoviesList movies={movies} />}\n    </div>\n  );\n};\nexport default Home;\n","import axios from 'axios';\n\nconst API_KEY = '8ce1621260b74e6098b536a0b1ea63ad';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getAllMoviesList = async () => {\n  try {\n    const data = await axios(`/trending/all/day?api_key=${API_KEY}`);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getMovieByQuery = async query => {\n  try {\n    const data = await axios(\n      `/search/movie?api_key=${API_KEY}&query=${query}&include_adult=false`\n    );\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getMovieFullInfo = async movieId => {\n  try {\n    const { data } = await axios.get(`/movie/${movieId}?api_key=${API_KEY}`);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getMovieCast = async movieId => {\n  try {\n    const { data } = await axios(\n      `/movie/${movieId}/credits?api_key=${API_KEY}`\n    );\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getMovieReviews = async movieId => {\n  try {\n    const data = await axios(`/movie/${movieId}/reviews?api_key=${API_KEY}`);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};\n"],"names":["MoviesList","_ref","movies","location","useLocation","_jsx","children","map","_ref2","id","title","Link","to","concat","routes","state","from","style","color","useFetchAllMovies","setMovies","useState","error","setError","loading","setLoading","useEffect","async","data","getAllMoviesList","results","fetchAllList","require","getMovieFullInfo","useFetchMovieDetails","movie","setMovie","movieId","useParams","fetchMovie","useFetchMovieReviews","reviews","setReviews","getMovieReviews","fetchMovieReviews","useFetchByQuery","searchParams","setSearchParams","useSearchParams","query","get","getMovieByQuery","fetchResponse","handleSubmit","value","useFetchMovieCast","credits","setCredits","getMovieCast","cast","fetchMovieCast","Home","_jsxs","Loader","length","API_KEY","axios"],"sourceRoot":""}