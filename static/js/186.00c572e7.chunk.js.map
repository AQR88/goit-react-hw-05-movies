{"version":3,"file":"static/js/186.00c572e7.chunk.js","mappings":"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","sources":["components/Reviews/Reviews.jsx","hooks/useFetchAllMovies.js","hooks/useFetchMovieDetails.js","hooks/useFetchMovieReviews.js","hooks/useFetchByQuery.js","hooks/useFetchMovieCast.js","services/movie-service.js"],"sourcesContent":["import { useFetchMovieReviews } from 'hooks';\n\nconst Reviews = () => {\n  const movieReviews = useFetchMovieReviews();\n  if (movieReviews.reviews.length === 0 || !movieReviews.reviews) {\n    return (\n      <p style={{ textAlign: 'center' }}>There is no information yetðŸ™„ </p>\n    );\n  }\n  return (\n    <>\n      <h3 style={{ textAlign: 'center', textDecoration: 'underline' }}>\n        Rewievs\n      </h3>\n      <ul>\n        {movieReviews.reviews.map(({ movieId, author, content }) => (\n          <li key={movieId}>\n            <h3 style={{ textAlign: 'center' }}>{author}</h3>\n            <p style={{ textAlign: 'left' }}>{content}</p>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default Reviews;\n","import { useEffect, useState } from 'react';\nimport { getAllMoviesList } from 'services/movie-service';\n\nexport const useFetchAllMovies = () => {\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    const fetchAllList = async () => {\n      try {\n        const { data } = await getAllMoviesList();\n        setMovies(data.results);\n      } catch (error) {\n        setError('Something went wrong');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchAllList();\n  }, []);\n\n  return { movies, error, loading };\n};\n","import { useParams } from 'react-router-dom';\n\nconst { useState, useEffect } = require('react');\nconst { getMovieFullInfo } = require('services/movie-service');\n\nexport const useFetchMovieDetails = () => {\n  const [movie, setMovie] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const { movieId } = useParams();\n  useEffect(() => {\n    if (!movieId) return;\n    setLoading(true);\n    const fetchMovie = async () => {\n      try {\n        const data = await getMovieFullInfo(movieId);\n        setMovie(data);\n      } catch (error) {\n        setError('Something went wrongðŸ™„');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMovie();\n  }, [movieId]);\n  return { movie, error, loading };\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from 'services/movie-service';\n\nexport const useFetchMovieReviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setLoading(true);\n    if (!movieId) return;\n    const fetchMovieReviews = async () => {\n      try {\n        const { data } = await getMovieReviews(movieId);\n        setReviews(data.results);\n      } catch (error) {\n        setError('Something went wrongðŸ™„');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMovieReviews();\n  }, [movieId]);\n\n  return { reviews, error, loading };\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getMovieByQuery } from 'services/movie-service';\n\nconst useFetchByQuery = () => {\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n\n  useEffect(() => {\n    setLoading(true);\n    if (!query) return;\n    const fetchResponse = async () => {\n      try {\n        const { data } = await getMovieByQuery(query);\n        setMovies(data.results);\n      } catch (error) {\n        setError('Something went wrongðŸ™„');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchResponse();\n  }, [query]);\n\n  const handleSubmit = value => {\n    setSearchParams({ query: value });\n  };\n  return { movies, error, loading, handleSubmit };\n};\n\nexport default useFetchByQuery;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCast } from 'services/movie-service';\n\nexport const useFetchMovieCast = () => {\n  const [credits, setCredits] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setLoading(true);\n    if (!movieId) return;\n    const fetchMovieCast = async () => {\n      try {\n        const data = await getMovieCast(movieId);\n        setCredits(data.cast);\n      } catch (error) {\n        setError('Something went wrongðŸ™„');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMovieCast();\n  }, [movieId]);\n\n  return { credits, error, loading };\n};\n","import axios from 'axios';\n\nconst API_KEY = '8ce1621260b74e6098b536a0b1ea63ad';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getAllMoviesList = async () => {\n  try {\n    const data = await axios(`/trending/all/day?api_key=${API_KEY}`);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getMovieByQuery = async query => {\n  try {\n    const data = await axios(\n      `/search/movie?api_key=${API_KEY}&query=${query}&include_adult=false`\n    );\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getMovieFullInfo = async movieId => {\n  try {\n    const { data } = await axios.get(`/movie/${movieId}?api_key=${API_KEY}`);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getMovieCast = async movieId => {\n  try {\n    const { data } = await axios(\n      `/movie/${movieId}/credits?api_key=${API_KEY}`\n    );\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getMovieReviews = async movieId => {\n  try {\n    const data = await axios(`/movie/${movieId}/reviews?api_key=${API_KEY}`);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};\n"],"names":["Reviews","movieReviews","useFetchMovieReviews","reviews","length","_jsxs","_Fragment","children","_jsx","style","textAlign","textDecoration","map","_ref","movieId","author","content","useFetchAllMovies","movies","setMovies","useState","error","setError","loading","setLoading","useEffect","async","data","getAllMoviesList","results","fetchAllList","require","getMovieFullInfo","useFetchMovieDetails","movie","setMovie","useParams","fetchMovie","setReviews","getMovieReviews","fetchMovieReviews","useFetchByQuery","searchParams","setSearchParams","useSearchParams","query","get","getMovieByQuery","fetchResponse","handleSubmit","value","useFetchMovieCast","credits","setCredits","getMovieCast","cast","fetchMovieCast","API_KEY","axios","concat"],"sourceRoot":""}